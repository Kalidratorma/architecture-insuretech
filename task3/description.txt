Проблемы и риски текущей архитектуры (до перехода на Event-Driven подход)

1. Задержки и неактуальные данные
- core-app получает данные о продуктах от ins-product-aggregator каждые 15 минут, что может приводить к устареванию информации.
- ins-comp-settlement получает данные только раз в сутки, что делает расчёты агентских выплат неоперативными.

2. Повышенная нагрузка и зависимость от REST
- core-app и ins-comp-settlement делают регулярные REST-запросы, что создаёт нагрузку на ins-product-aggregator.
- Каждый сервис зависит от доступности других сервисов в момент выполнения запроса, что снижает надёжность.

3. Ошибки интеграции с внешними API
- ins-product-aggregator при каждом REST-вызове запрашивает внешние API страховых компаний.
- При сетевых или API-ошибках может возвращаться ошибка в core-app или ins-comp-settlement.

4. Риск деградации при масштабировании
- При увеличении числа партнёров (ещё 5 страховых компаний) и клиентов, REST-запросы от всех потребителей могут стать бутылочным горлышком.
- Массовые одновременные опросы могут перегрузить ins-product-aggregator.

5. Отсутствие отслеживания событий
- Невозможно отследить, какие изменения в продуктах произошли и когда.
- Нет централизованного журнала событий, который можно использовать для отладки, репликации или повторного воспроизведения данных.

6. Хрупкость при падении компонентов
- Если ins-product-aggregator или core-app временно недоступны, ins-comp-settlement не сможет получить данные — запрос завершится ошибкой.
- Нет механизма повторной доставки или буферизации данных.

7. Нет расширяемости
- Новым сервисам придётся реализовывать собственную логику опроса или внедрять в существующие REST-интеграции, что усложняет развитие.

Вывод:
Текущая архитектура REST-взаимодействий ограничивает масштабируемость, надёжность и своевременность данных.
Переход на Event-Driven архитектуру (через брокер сообщений, например Kafka) позволит обеспечить реактивную доставку данных,
уменьшить связанность сервисов и устранить ошибки, вызванные синхронным взаимодействием.

Паттерн Transactional Outbox можно использовать в сервисах:
- core-app
- ins-product-aggregator
